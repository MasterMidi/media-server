version: "3.9"
services:
  homarr:
    image: ghcr.io/ajnart/homarr:latest
    container_name: homarr
    user: ${HOMARR_PUID:?error}:${SHARED_GROUP_ID:?error}
    restart: unless-stopped
    volumes:
      - ./homarr/configs:/app/data/configs
      - ./homarr/data:/data
      - ./homarr/icons:/app/public/icons
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - '${HOMARR_PORT:?error}:7575'

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    # group_add:
    #   - ${EXTERNAL_GPU_DRIVER_GROUP:?error}
    environment:
      - PUID=${JELLYFIN_PUID:?error}
      - PGID=${SHARED_GROUP_ID:?error}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_LOCATION:?error}/jellyfin/config:/config
      - ${CONFIG_LOCATION:?error}/jellyfin/web:/jellyfin/jellyfin-web:ro
      - ${CONFIG_LOCATION:?error}/jellyfin/certs:/certs:ro
      - ${CONFIG_LOCATION:?error}/jellyfin/transcodes:/transcodes
      - ${STORAGE_LOCATION:?error}/media:/storage/media
    ports:
      - ${JELLYFIN_PORT:?error}:8096 #https
      - 9011:8920 #https
      # - 7359:7359/udp #optional
      # - 1900:1900/udp #optional
      # devices:
      #   - ${EXTERNAL_GPU_DRIVER_MOUNT:?error}

  jellyseerr:
    image: ghcr.io/hotio/jellyseerr
    container_name: jellyseerr
    restart: unless-stopped
    ports:
      - ${JELLYSEERR_PORT:?error}:5055
    environment:
      - PUID=${JELLYSEERR_PUID:?error}
      - PGID=${SHARED_GROUP_ID:?error}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ./jellyseerr/config:/config

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    environment:
      - PUID=${RADARR_PUID:?error}
      - PGID=${SHARED_GROUP_ID:?error}
      - TZ=${TIMEZONE}
    volumes:
      - ./radarr/config:/config
      - ${STORAGE_LOCATION}:/storage
    ports:
      - ${RADARR_PORT:?error}:7878
  
  radarr-anime:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr-anime
    restart: unless-stopped
    environment:
      - PUID=${RADARR_PUID:?error}
      - PGID=${SHARED_GROUP_ID:?error}
      - TZ=${TIMEZONE}
    volumes:
      - ./radarr-anime/config:/config
      - ${STORAGE_LOCATION}:/storage
    ports:
      - ${RADARR_ANIME_PORT:?error}:7878

  sonarr:
    image: ghcr.io/hotio/sonarr:nightly
    container_name: sonarr
    restart: unless-stopped
    environment:
      - PUID=${SONARR_PUID:?error}
      - PGID=${SHARED_GROUP_ID:?error}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_LOCATION}/sonarr/config:/config
      - ${STORAGE_LOCATION}:/storage
    ports:
      - "${SONARR_PORT:?error}:8989"

  # exportarr-sonarr:
  #   image: ghcr.io/onedr0p/exportarr:latest
  #   container_name: sonarr-exportarr
  #   restart: unless-stopped
  #   command: [ "sonarr" ]
  #   environment:
  #     - PORT=9042
  #     - URL=http://sonarr:8989
  #     - APIKEY=${SONARR_API_KEY:?error}
  #     - ENABLE_ADDITIONAL_METRICS=true
  #   ports:
  #     - "9042:9042"

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    environment:
      - PUID=${PROWLARR_PUID:?error}
      - PGID=${SHARED_GROUP_ID:?error}
      - TZ=${TIMEZONE}
    volumes:
      - ./prowlarr/config:/config
    ports:
      - ${PROWLARR_PORT:?error}:9696

  # exportarr-prowlarr:
  #   image: ghcr.io/onedr0p/exportarr:latest
  #   container_name: prowlarr-exportarr
  #   restart: unless-stopped
  #   command: [ "prowlarr" ]
  #   environment:
  #     - PORT=9052
  #     - URL=http://prowlarr:9696
  #     - APIKEY=${PROWLARR_API_KEY:?error}
  #     - ENABLE_ADDITIONAL_METRICS=true
  #   ports:
  #     - "9052:9052"

  recyclarr:
    image: recyclarr/recyclarr:6
    container_name: recyclarr
    user: ${RECYCLARR_PUID:?error}:${SHARED_GROUP_ID:?error}
    group_add:
      - ${SHARED_GROUP_ID:?error}
    environment:
      - TZ=${TIMEZONE}
      - RECYCLARR_CREATE_CONFIG=true
    volumes:
      - ./recyclarr/config:/config

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    environment:
      - PUID=${BAZARR_PUID:?error}
      - PGID=${SHARED_GROUP_ID:?error}
      - TZ=${TIMEZONE}
    volumes:
      - ./bazarr/config:/config
      - ${STORAGE_LOCATION}/media:/storage/media
    ports:
      - ${BAZARR_PORT:?error}:6767

  qbitmanage:
    image: ghcr.io/hotio/qbitmanage
    container_name: qbitmanage
    restart: unless-stopped
    environment:
      - PUID=${QBITTORRENT_PUID:?error}
      - PGID=${SHARED_GROUP_ID:?error}
      - UMASK=002
      - TZ=${TIMEZONE}
      - QBT_DRY_RUN=false
      - QBT_SCHEDULE=60
    volumes:
      - ./qbitmanage/config:/config
      - ./data/qbitmanage:/data
      - ${STORAGE_LOCATION}/torrents:/storage/torrents

  qbittorrent:
    image: ghcr.io/hotio/qbittorrent:release-4.6.0
    container_name: qbit-media
    restart: unless-stopped
    environment:
      - PUID=${QBITTORRENT_PUID:?error}
      - PGID=${SHARED_GROUP_ID:?error}
      - UMASK=002
      - TZ=${TIMEZONE}
      - WEBUI_PORTS=9060
    volumes:
      - ./qbit/config:/config
      - ./qbit/webui:/webui
      - ${STORAGE_LOCATION}/torrents:/storage/torrents
    ports:
      - ${QBITTORRENT_PORT:?error}:9060
      - 6881:6881
      - 6881:6881/udp
  # autobrr:
  #   image: ghcr.io/autobrr/autobrr:latest
  #   container_name: autobrr
  #   restart: unless-stopped
  #   environment:
  #     - TZ=${TIMEZONE}
  #   user: 1014:1002
  #   volumes:
  #     - ./autobrr/config:/config
  #   ports:
  #     - 9056:7474

  bitmagnet:
    image: ghcr.io/bitmagnet-io/bitmagnet:latest
    container_name: bitmagnet
    ports:
      - "9055:3333"
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=postgres
      - REDIS_ADDR=redis:6379
      - TMDB_API_KEY=${TMDB_API_KEY:?error}
    command:
      - worker
      - run
      - --keys=http_server
      - --keys=queue_server
      # disable the next line to run without DHT crawler
      - --keys=dht_crawler
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # don't change this name, it's used in the bitmagnet container
  postgres:
    image: postgres:16-alpine
    container_name: bitmagnet-postgres
    volumes:
      - ${STORAGE_LOCATION:?error}/data/postgres:/var/lib/postgresql/data
    #    ports:
    #      - "5432:5432" Expose this port if you'd like to dig around in the database
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=bitmagnet
      - PGUSER=postgres
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready
      start_period: 20s
      interval: 10s

  # don't change this name, it's used in the bitmagnet container
  redis:
    image: redis:7-alpine
    container_name: bitmagnet-redis
    volumes:
      - ./data/redis:/data
    restart: unless-stopped
    entrypoint:
      - redis-server
      - --save 60 1
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      start_period: 20s
      interval: 10s

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   restart: unless-stopped
  #   user: "1014"
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   volumes:
  #     - ./prometheus/:/etc/prometheus/
  #     - ./data/prometheus:/prometheus
  #   ports:
  #     - 9005:9090

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   restart: unless-stopped
  #   user: "1014"
  #   depends_on:
  #     - prometheus
  #   volumes:
  #     - ./data/grafana:/var/lib/grafana
  #     - ./grafana/provisioning/:/etc/grafana/provisioning/
  #   env_file:
  #     - ./grafana/config.monitoring
  #   ports:
  #     - 3000:3000
